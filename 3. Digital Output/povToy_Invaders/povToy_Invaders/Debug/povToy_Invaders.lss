
povToy_Invaders.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000122  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000830  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000704  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000279  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ec  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000178  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 82 00 	call	0x104	; 0x104 <main>
  8e:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <pause>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8f e3       	ldi	r24, 0x3F	; 63
  98:	9f e1       	ldi	r25, 0x1F	; 31
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <pause+0x4>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <pause+0xa>
  a0:	00 00       	nop
  a2:	8f e3       	ldi	r24, 0x3F	; 63
  a4:	9f e1       	ldi	r25, 0x1F	; 31
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <pause+0x10>
  aa:	00 c0       	rjmp	.+0      	; 0xac <pause+0x16>
  ac:	00 00       	nop
  ae:	8f e3       	ldi	r24, 0x3F	; 63
  b0:	9f e1       	ldi	r25, 0x1F	; 31
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <pause+0x1c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <pause+0x22>
  b8:	00 00       	nop
  ba:	8f e3       	ldi	r24, 0x3F	; 63
  bc:	9f e1       	ldi	r25, 0x1F	; 31
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <pause+0x28>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <pause+0x2e>
  c4:	00 00       	nop
  c6:	8f e3       	ldi	r24, 0x3F	; 63
  c8:	9f e1       	ldi	r25, 0x1F	; 31
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <pause+0x34>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <pause+0x3a>
  d0:	00 00       	nop
  d2:	08 95       	ret

000000d4 <POVDisplay>:
}

void POVDisplay(uint8_t povData[], uint8_t numberRows) {
	uint8_t i = 0;
	
	for(i = 0; i < numberRows; i++)
  d4:	66 23       	and	r22, r22
  d6:	99 f0       	breq	.+38     	; 0xfe <POVDisplay+0x2a>
  d8:	fc 01       	movw	r30, r24
  da:	61 50       	subi	r22, 0x01	; 1
  dc:	26 2f       	mov	r18, r22
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	28 0f       	add	r18, r24
  e6:	39 1f       	adc	r19, r25
	{
		LED_PORT = povData[i];
  e8:	91 91       	ld	r25, Z+
  ea:	9b b9       	out	0x0b, r25	; 11
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	9f e1       	ldi	r25, 0x1F	; 31
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <POVDisplay+0x1c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <POVDisplay+0x22>
  f6:	00 00       	nop
}

void POVDisplay(uint8_t povData[], uint8_t numberRows) {
	uint8_t i = 0;
	
	for(i = 0; i < numberRows; i++)
  f8:	e2 17       	cp	r30, r18
  fa:	f3 07       	cpc	r31, r19
  fc:	a9 f7       	brne	.-22     	; 0xe8 <POVDisplay+0x14>
	{
		LED_PORT = povData[i];
		_delay_ms(DELAYTIME);
	}
	pause();
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <pause>
 102:	08 95       	ret

00000104 <main>:
}

int main(void) {

  LED_DDR = 0xff;                            /* set all LEDs to output */ 
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	8a b9       	out	0x0a, r24	; 10

  while (1) {                                              /* mainloop */

      POVDisplay(invaderData1, sizeof(invaderData1));
 108:	6b e0       	ldi	r22, 0x0B	; 11
 10a:	8b e0       	ldi	r24, 0x0B	; 11
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 6a 00 	call	0xd4	; 0xd4 <POVDisplay>
      POVDisplay(invaderData2, sizeof(invaderData2));
 112:	6b e0       	ldi	r22, 0x0B	; 11
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 6a 00 	call	0xd4	; 0xd4 <POVDisplay>
 11c:	f5 cf       	rjmp	.-22     	; 0x108 <main+0x4>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
