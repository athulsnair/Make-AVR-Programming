
povToy_CyclonEyes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000743  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  000008ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025a  00000000  00000000  00000f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a9  00000000  00000000  000011fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ab  00000000  00000000  000015a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#define DELAYTIME 2                                    /* milliseconds */

int main(void) {
  uint8_t i=0;
  DDRD = 0b11111111;              /* Data Direction Register B: all on */
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
#include <util/delay.h>                     /* Functions to waste time */

#define DELAYTIME 2                                    /* milliseconds */

int main(void) {
  uint8_t i=0;
  84:	80 e0       	ldi	r24, 0x00	; 0
		i++;
	}
	
	while(i > 0)
	{
		PORTD = (1 << i);
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	50 e0       	ldi	r21, 0x00	; 0
  8a:	0f c0       	rjmp	.+30     	; 0xaa <main+0x2a>

  while (1) {

    while(i < 7)
	{
		PORTD = (1 << i);
  8c:	9a 01       	movw	r18, r20
  8e:	08 2e       	mov	r0, r24
  90:	02 c0       	rjmp	.+4      	; 0x96 <main+0x16>
  92:	22 0f       	add	r18, r18
  94:	33 1f       	adc	r19, r19
  96:	0a 94       	dec	r0
  98:	e2 f7       	brpl	.-8      	; 0x92 <main+0x12>
  9a:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	ef e3       	ldi	r30, 0x3F	; 63
  9e:	ff e1       	ldi	r31, 0x1F	; 31
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x20>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x26>
  a6:	00 00       	nop
		_delay_ms(DELAYTIME);
		i++;
  a8:	8f 5f       	subi	r24, 0xFF	; 255
  uint8_t i=0;
  DDRD = 0b11111111;              /* Data Direction Register B: all on */

  while (1) {

    while(i < 7)
  aa:	87 30       	cpi	r24, 0x07	; 7
  ac:	78 f3       	brcs	.-34     	; 0x8c <main+0xc>
		PORTD = (1 << i);
		_delay_ms(DELAYTIME);
		i++;
	}
	
	while(i > 0)
  ae:	88 23       	and	r24, r24
  b0:	e1 f3       	breq	.-8      	; 0xaa <main+0x2a>
	{
		PORTD = (1 << i);
  b2:	9a 01       	movw	r18, r20
  b4:	08 2e       	mov	r0, r24
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x3c>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <main+0x38>
  c0:	2b b9       	out	0x0b, r18	; 11
  c2:	ef e3       	ldi	r30, 0x3F	; 63
  c4:	ff e1       	ldi	r31, 0x1F	; 31
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x46>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x4c>
  cc:	00 00       	nop
		_delay_ms(DELAYTIME);
		i--;
  ce:	81 50       	subi	r24, 0x01	; 1
		PORTD = (1 << i);
		_delay_ms(DELAYTIME);
		i++;
	}
	
	while(i > 0)
  d0:	81 f7       	brne	.-32     	; 0xb2 <main+0x32>
  d2:	eb cf       	rjmp	.-42     	; 0xaa <main+0x2a>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
